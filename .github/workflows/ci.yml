# This file is autogenerated by maturin v1.5.1
# To update, run
#
#    maturin generate-ci github --pytest
#
name: CI

on:
  push:
    # branches:
    #   - main
    #   - master
    # tags:
    #   - '*'
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  # lint:
  #   name: Lint
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Install uv
  #       uses: astral-sh/setup-uv@v6
  #     - run: uv run ruff check --output-format github

  linux:
    runs-on: ${{ matrix.platform.runner }}
    # needs: [lint]
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
          - runner: ubuntu-latest
            target: x86
          - runner: ubuntu-latest
            target: aarch64
          # - runner: ubuntu-latest
          #   target: armv7
          # - runner: ubuntu-latest
          #   target: s390x
          # - runner: ubuntu-latest
          #   target: ppc64le
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          # sccache: 'true'
          manylinux: auto
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist
      - name: Setup uv
        uses: astral-sh/setup-uv@v6
      - name: Test
        run: uv run pytest

  windows:
    runs-on: ${{ matrix.platform.runner }}
    # needs: [lint]
    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x64
          - runner: windows-latest
            target: x86
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          architecture: ${{ matrix.platform.target }}
      - name: Install vcpkg and OpenBLAS
        shell: pwsh
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          .\vcpkg\bootstrap-vcpkg.bat
          .\vcpkg\vcpkg.exe install openblas:x64-windows
        env:
          VCPKG_DEFAULT_TRIPLET: x64-windows
      - name: Set VCPKG_ROOT
        shell: pwsh
        run: |
          echo "VCPKG_ROOT=$env:GITHUB_WORKSPACE\vcpkg" | Out-File -FilePath $env:GITHUB_ENV -Append
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: dist
      - name: Setup uv
        uses: astral-sh/setup-uv@v6
      - name: Test
        run: uv run pytest

  macos:
    runs-on: ${{ matrix.platform.runner }}
    # needs: [lint]
    strategy:
      matrix:
        platform:
          - runner: macos-latest
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist
      - name: List built wheels
        run: ls -lh dist || true
      - name: Setup uv
        uses: astral-sh/setup-uv@v6
      - name: Test
        run: uv run pytest

  sdist:
    runs-on: ubuntu-latest
    # needs: [lint]
    steps:
      - uses: actions/checkout@v4
      - name: Install OpenSSL development headers
        run: sudo apt-get update && sudo apt-get install -y libssl-dev pkg-config
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  # release:
  #   name: Release
  #   runs-on: ubuntu-latest
  #   if: ${{ startsWith(github.ref, 'refs/tags/') }}
  #   needs: [linux, windows, macos, sdist]
  #   steps:
  #     - uses: actions/download-artifact@v4
  #     - name: Publish to PyPI
  #       uses: PyO3/maturin-action@v1
  #       env:
  #         MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
  #       with:
  #         command: upload
  #         args: --non-interactive --skip-existing wheels-*/*

  deploy:
    runs-on: ubuntu-latest
    # needs: [lint]
    steps:
      - uses: actions/checkout@v4
      - name: Configure Git Credentials
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
      - run: echo "cache_id=$(date --utc '+%V')" >> $GITHUB_ENV 
      - uses: actions/cache@v4
        with:
          key: mkdocs-material-${{ env.cache_id }}
          path: ~/.cache 
          restore-keys: |
            mkdocs-material-
      - name: Install uv
        uses: astral-sh/setup-uv@v6
      - name: build-deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: uv run mkdocs gh-deploy --force